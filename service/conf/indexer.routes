    ###
    #  summary: Index the specified database scope
    #  parameters:
    #  - in: header
    #    name: Authorization
    #    description: Authorization token
    #    required: false
    #    type: string
    #  - in: query
    #    name: databaseScope
    #    type: string
    #    enum: [INFERRED, RELEASED]
    #  - in: query
    #    name: completeRebuild
    #    type: bool
    #  - in: query
    #    name: releasedOnly
    #    type: bool
    #  - in: query
    #    name: simulate
    #    type: bool
    #  - in: query
    #    name: restrictToOrganizations
    #    type: string
    #  responses:
    #    '200':
    #      description: Ok
    ###
  POST /  controllers.IndexerController.index(databaseScope: models.DatabaseScope, completeRebuild: Boolean?=false,releasedOnly: Boolean?=false, simulate: Boolean?=true, restrictToOrganizations:Option[String])

  ###
  #  summary: Index the specified type
  #  parameters:
  #  - in: header
  #    name: Authorization
  #    description: Authorization token
  #    required: false
  #    type: string
  #  - in: path
  #    name: dataType
  #    type: string
  #    enum: [Dataset, Person, Project, Sample, Subject, SoftwareProject, ModelInstance]
  #  - in: query
  #    name: databaseScope
  #    type: string
  #    enum: [INFERRED, RELEASED]
  #  - in: query
  #    name: completeRebuild
  #    type: bool
  #  - in: query
  #    name: releasedOnly
  #    type: bool
  #  - in: query
  #    name: simulate
  #    type: bool
  #  - in: query
  #    name: restrictToOrganizations
  #    type: string
  #  responses:
  #    '200':
  #      description: Ok
  ###
POST /:dataType  controllers.IndexerController.indexByType(databaseScope: models.DatabaseScope,dataType: String, completeRebuild: Boolean?=false,releasedOnly: Boolean?=false, simulate: Boolean?=true, restrictToOrganizations:Option[String])


  ###
  #  summary: Apply a template to a single instance this process is the first step of the indexing to the search UI
  #  parameters:
  #  - in: header
  #    name: Authorization
  #    description: Authorization token
  #    required: false
  #    type: string
  #  - in: path
  #    name: templateType
  #    type: string
  #    enum:
  #      - Dataset
  #      - Person
  #      - Project
  #      - UnimindsPerson
  #      - ModelInstance
  #      - SoftwareProject
  #    default: Dataset
  #  - in: path
  #    name: query
  #    type: string
  #    enum: [INFERRED, RELEASED]
  #  - in: query
  #    name: from
  #    type: int
  #  - in: query
  #    name: size
  #    type: int
  #  responses:
  #    '200':
  #      description: Ok
  ###
GET /templates/:templateType  controllers.IndexerController.applyTemplateByType(databaseScope: models.DatabaseScope, templateType:models.templates.TemplateType, restrictToOrg:Option[String], from:Option[Int], size:Option[Int])


  ###
  #  summary: Apply a template for meta information of a specific type
  #  parameters:
  #  - in: header
  #    name: Authorization
  #    description: Authorization token
  #    required: false
  #    type: string
  #  - in: path
  #    name: templateType
  #    type: string
  #    enum: [Dataset, Person, Project, Sample, Subject, SoftwareProject, ModelInstance]
  #    default: Dataset
  #  responses:
  #    '200':
  #      description: Ok
  ###
GET /templates/:templateType/meta  controllers.IndexerController.applyMetaTemplateByType(templateType:models.templates.TemplateType)


  ###
  #  summary: Apply a template for meta information of a specific type
  #  parameters:
  #  - in: header
  #    name: Authorization
  #    description: Authorization token
  #    required: false
  #    type: string
  #  - in: path
  #    name: templateType
  #    type: string
  #    enum: [Dataset, Person, Project, Sample, Subject, SoftwareProject, ModelInstance]
  #    default: Dataset
  #  responses:
  #    '200':
  #      description: Ok
  ###
GET /templates/:templateType/labels  controllers.IndexerController.getLabels(templateType:models.templates.TemplateType)
  ###
  #  summary: Apply a template to a single instance this process is the first step of the indexing to the search UI
  #  parameters:
  #  - in: header
  #    name: Authorization
  #    description: Authorization token
  #    required: false
  #    type: string
  #  - in: query
  #    name: databaseScope
  #    type: string
  #    enum: [INFERRED, RELEASED]
  #  - in: path
  #    name: templateType
  #    type: string
  #    enum:
  #      - Dataset
  #      - Person
  #      - Project
  #      - UnimindsPerson
  #      - ModelInstance
  #      - SoftwareProject
  #    default: Dataset
  #  - in: path
  #    name: id
  #    type: string
  #    format: uuid
  #  responses:
  #    '200':
  #      description: Ok
  ###
GET /templates/:templateType/:id  controllers.IndexerController.applyTemplateByTypeAndId(databaseScope: models.DatabaseScope, templateType:models.templates.TemplateType, id: java.util.UUID)

