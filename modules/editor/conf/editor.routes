###
#  summary: get a specific entity
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance to retrieve
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance to retrieve
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance to retrieve
#    required: true
#    type: string
#  - name: id
#    in: path
#    description: the UUID of the instance to retrieve
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
GET    /api/instance/:org/:domain/:schema/:version/:id                 editor.controllers.NexusEditorController.getInstance(org: String, domain:String, schema: String, version:String, id: String)

###
#  summary: return a an empty form for a specific entity type
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
GET    /api/instance/:org/:domain/:schema/:version                 editor.controllers.NexusEditorController.getEmptyForm(org: String, domain:String, schema: String, version:String)

###
#  summary: update an instance
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance to update
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance to update
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance to update
#    required: true
#    type: string
#  - name: id
#    in: path
#    description: the UUID of the instance to update
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
PUT   /api/instance/:org/:domain/:schema/:version/:id                editor.controllers.NexusEditorController.updateInstance(org: String, domain:String, schema: String, version:String, id: String)

###
#  summary: create a new instance
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance to create
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance to create
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance to create
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
POST   /api/instance/:org/:domain/:schema/:version                editor.controllers.NexusEditorController.createInstance(org: String, domain:String, schema: String, version:String)

###
#  summary: Get the number of revisions available for a specific instance
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance
#    required: true
#    type: string
#  - name: id
#    in: path
#    description: the UUID of the instance
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
GET    /api/revisions/:org/:domain/:schema/:version/:id                       editor.controllers.NexusEditorController.getInstanceNumberOfAvailableRevisions(org: String, domain:String, schema: String, version:String, id: String)

###
#  summary: Get a specific revision of an instance
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance
#    required: true
#    type: string
#  - name: id
#    in: path
#    description: the UUID of the instance
#    required: true
#    type: string
#  - name: rev
#    in: path
#    description: the revision of the instance to retrieve
#    required: false
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
GET    /api/reconciled/:org/:domain/:schema/:version/:id              editor.controllers.NexusEditorController.getSpecificReconciledInstance(org: String, domain:String, schema: String, version:String, id: String ,rev:Int ?= 1)

###
#  summary: Get a graph representation of an instance
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance
#    required: true
#    type: string
#  - name: id
#    in: path
#    description: the UUID of the instance
#    required: true
#    type: string
#  - name: step
#    in: path
#    description: the depth of the graph
#    required: false
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
GET    /api/graph/:org/:domain/:schema/:version/:id   editor.controllers.NexusEditorController.graphEntities(org: String, domain:String, schema: String, version:String, id: String, step:Int ?= 2)

###
#  summary: get release information on an entity and its children
#  tags:
#    - editor
#  parameters:
#  - name: org
#    in: path
#    description: organization the instance to retrieve
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance to retrieve
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance to retrieve
#    required: true
#    type: string
#  - name: id
#    in: path
#    description: id of the instance to retrieve
#    required: true
#    type: string
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
GET    /api/release/:org/:domain/:schema/:version/:id             editor.controllers.NexusEditorController.getInstanceAndChildrenReleaseStatus(org: String, domain:String, schema: String, version:String, id: String )

###
#  summary: get release information on a list of entity
#  tags:
#    - editor
#  parameters:
#  - in: body
#    name: instances
#    description: array of ids of the entities to retrieve
#    schema:
#      type: array
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
###
POST    /api/releasestatus            editor.controllers.NexusEditorController.getReleaseStatus

###
#  summary: create a schema where http://schema.org/identifier and the revision only is mandatory
#  parameters:
#  - in: body
#    name: instances
#    description: JsArray of entities to release
#    schema:
#      type: array
#      items:
#        type: object
#        required:
#          - "id"
#          - "rev"
#        properties:
#          "id":
#            type: string
#          "rev":
#            type: number
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
#  responses:
#    200:
#      description: "Ok"
###
POST   /api/release                                          editor.controllers.NexusEditorController.releaseInstances


###
#  summary: Create the current user as an Editor User
#  parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
#  responses:
#    201:
#      description: "Created"
###
POST   /api/user                                          editor.controllers.NexusEditorUserController.createCurrentUser

###
#  summary: Get the current user as an Editor User
#  parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
#  responses:
#    200:
#      description: "Ok"
###
GET   /api/user                                          editor.controllers.NexusEditorUserController.getCurrentUser
###
#      tags:
#        - editor
#      summary: Returns the lists of instance regrouped by folders
#      parameters:
#        - in: header
#          name: Authorization
#          description: Authorization token
#          required: false
#          type: string
#      responses:
#        '200':
#          description: Ok
#          example:
#           data:
#             - folderName: example
#               folderType: BOOKMARK|NODETYPE|...
#               lists:
#                 - id: ...
#                   name: name of the list
#                   editable: true | false
#                   uiSpec: 'A JSON object containing info specific for the UI'
#
###
GET /api/userLists                              editor.controllers.NexusEditorUserController.getUserLists

###
#tags:
#  - editor
#summary: Returns the instances  by schema - paginated - filterable
#parameters:
#  - in: header
#    name: Authorization
#    description: Authorization token
#    required: false
#    type: string
#  - name: org
#    in: path
#    description: organization the instance to retrieve
#    required: true
#    type: string
#  - name: domain
#    in: path
#    description: domain of the instance to retrieve
#    required: true
#    type: string
#  - name: schema
#    in: path
#    description: schema name
#    required: true
#    type: string
#  - name: version
#    in: path
#    description: version of the instance to retrieve
#    required: true
#    type: string
#  - name: from
#    in: path
#    description: the offset of the pagination
#    required: false
#    type: int
#  - name: size
#    in: path
#    description: the size of the page
#    required: false
#    type: int
#  - name: search
#    in: path
#    description: the search query only applied for the name of the instance
#    required: false
#    type: string
#    responses:
#      '200':
#        description: Ok
###
GET /api/userList/:org/:domain/:schema/:version     editor.controllers.NexusEditorUserController.getUserListBySchema(org: String, domain:String, schema: String, version:String, from:Option[Int], size:Option[Int], search:String?="")

###
# tags:
#   - editor
#  summary: Returns the instances of a list - paginated - filterable
#  parameters:
#    - in: header
#      name: Authorization
#      description: Authorization token
#      required: false
#      type: string
#      responses:
#        '200':
#          description: Ok
###
#GET /api/userList/:id                           editor.controllers.NexusEditorUserController.getUserLists(id: String)
